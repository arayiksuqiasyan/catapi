{"version":3,"sources":["redux/catRaducer/catRaducer.tsx","componet/CardItem.tsx","componet/Card.tsx","componet/NavBarItem.tsx","componet/NavBar.tsx","redux/catAction/catAction.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["counterSlice","createSlice","name","initialState","cats","catsImage","catsTypes","page","categoryId","loading","errorMessage","reducers","getCatsHandler","state","action","payload","getCatsImageHandler","map","item","id","url","categories","changeCatsHandler","data","setLoading","changePage","changeCategoryId","setErrorMessage","actions","CardItem","type","className","src","alt","style","width","height","Card","dispatch","useDispatch","useSelector","onScroll","event","nativeEvent","target","scrollTop","clientHeight","scrollHeight","NavBarItem","cat","changeCatsTypes","onClick","NavBar","useEffect","fetch","then","res","json","catch","error","message","getCatsImages","Button","variant","color","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","ReactDOM","render","store","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e27f0f19.chunk.js","sourcesContent":["import {createSlice} from \"@reduxjs/toolkit\";\r\nimport {tCatImage, tState} from \"../../global.types\";\r\n\r\n\r\nconst initialState: tState = {\r\n    cats: [],\r\n    catsImage: [],\r\n    catsTypes: [],\r\n    page: 1,\r\n    categoryId: null,\r\n    loading: false,\r\n    errorMessage: null\r\n};\r\n\r\nexport const counterSlice = createSlice({\r\n    name: \"cats\",\r\n    initialState,\r\n    reducers: {\r\n\r\n        getCatsHandler(state, action) {\r\n            state.cats = action.payload\r\n        },\r\n\r\n        getCatsImageHandler(state, action) {\r\n            state.catsImage = action.payload.map((item: tCatImage) => ({\r\n                id: item.id,\r\n                url: item.url,\r\n                categories: item.categories || []\r\n            }))\r\n        },\r\n\r\n        changeCatsHandler(state, action) {\r\n            if (action.payload.page === 1) {\r\n                state.catsTypes = action.payload.data;\r\n            } else {\r\n                state.catsTypes = [...state.catsTypes, ...action.payload.data];\r\n            }\r\n        },\r\n\r\n        setLoading(state, action) {\r\n            state.loading = action.payload\r\n        },\r\n\r\n        changePage(state, action) {\r\n            state.page = action.payload;\r\n        },\r\n\r\n        changeCategoryId(state, action) {\r\n            state.page = 1;\r\n            state.categoryId = action.payload;\r\n        },\r\n\r\n        setErrorMessage(state, action) {\r\n            state.errorMessage = action.payload;\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    changePage, setLoading,\r\n    getCatsHandler, setErrorMessage,\r\n    changeCategoryId, changeCatsHandler,\r\n    getCatsImageHandler,\r\n} = counterSlice.actions;\r\n\r\nexport default counterSlice.reducer;\r\n","import React from \"react\"\r\nimport {tChangedCats} from \"../global.types\";\r\n\r\ninterface tProps {\r\n    type: tChangedCats\r\n}\r\n\r\nfunction CardItem({type}: tProps) {\r\n    return (\r\n        <li className=\"item-cat\">\r\n            <img src={type.url} alt=\"#\" style={{width: \"100%\", height: \"100%\"}}/>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default CardItem","import React, {UIEvent} from \"react\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nimport {RootState} from \"../redux/store\";\r\nimport CardItem from \"../componet/CardItem\";\r\nimport {tChangedCats} from \"../global.types\";\r\nimport {changePage} from \"../redux/catRaducer/catRaducer\";\r\n\r\nfunction Card() {\r\n    const dispatch = useDispatch();\r\n\r\n    const {page, loading, catsTypes} = useSelector((state: RootState) => state.cats)\r\n\r\n    const loadMore = () => {\r\n        if (!loading) {\r\n            dispatch(changePage(page + 1))\r\n        }\r\n    }\r\n\r\n    const handleOnScroll = (event: UIEvent) => {\r\n        const {scrollTop, clientHeight, scrollHeight} = (event.nativeEvent.target as HTMLUListElement);\r\n        if (scrollTop + clientHeight + 500 >= scrollHeight) {\r\n            loadMore()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={`${loading ? 'loading' : ''}`}>\r\n            <ul className={`card-container`}\r\n                onScroll={handleOnScroll}\r\n            >\r\n                {catsTypes.map((type: tChangedCats) =>\r\n                    <CardItem key={type.id}\r\n                              type={type}\r\n                    />\r\n                )}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card","import React from \"react\";\r\n\r\nimport {iCat} from \"../global.types\";\r\nimport {changeCat} from \"../global.types\";\r\n\r\ninterface tProps {\r\n    cat: iCat\r\n    changeCatsTypes: changeCat\r\n}\r\n\r\nfunction NavBarItem({cat, changeCatsTypes}: tProps) {\r\n    return (\r\n        <li className=\"navigation-li\"\r\n            onClick={() => changeCatsTypes(cat.id)}>{cat.name}\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default NavBarItem","import React, {useEffect} from \"react\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\n\r\nimport {RootState} from \"../redux/store\";\r\nimport {iCat, changeCat} from \"../global.types\";\r\nimport NavBarItem from \"../componet/NavBarItem\"\r\nimport {getCatsImages} from \"../redux/catAction/catAction\";\r\nimport {changePage, changeCategoryId} from \"../redux/catRaducer/catRaducer\"\r\n\r\n\r\nexport default NavBar\r\n\r\nfunction NavBar() {\r\n    const dispatch = useDispatch()\r\n    const {cats, page, loading, categoryId, errorMessage} = useSelector((state: RootState) => state.cats)\r\n\r\n    useEffect(() => {\r\n        if (!loading) {\r\n            dispatch(getCatsImages(categoryId, page))\r\n        }\r\n    }, [page, categoryId])\r\n\r\n    const loadMore = () => {\r\n        if (!loading) {\r\n            dispatch(changePage(page + 1))\r\n        }\r\n    }\r\n\r\n    const changeCatsTypes: changeCat = (id: number) => {\r\n        if (!loading) {\r\n            dispatch(changeCategoryId(id))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ul className=\"navigation-app\">\r\n            <h1>Categories</h1>\r\n            <Button variant=\"contained\" onClick={loadMore}>Load More</Button>\r\n            <div className=\"types-container\">\r\n                {cats.map((cat: iCat) => {\r\n                    return <NavBarItem cat={cat}\r\n                                       key={cat.id}\r\n                                       changeCatsTypes={changeCatsTypes}/>\r\n                })}\r\n            </div>\r\n            <hr/>\r\n            {errorMessage && <p style={{color: 'red'}}>{errorMessage}</p>}\r\n        </ul>\r\n\r\n    )\r\n}\r\n","import {getCatsHandler, changeCatsHandler, setLoading, setErrorMessage} from \"../catRaducer/catRaducer\"\r\n\r\ntype tActionCreator = (action: { payload: any; type: string; }) => void\r\n\r\ntype tDispatch = (id?: number | null, page?: number) => (actionCreator: tActionCreator) => void\r\n\r\nexport const getCats: tDispatch = () => (dispatch: tActionCreator) =>\r\n    fetch(\"https://api.thecatapi.com/v1/categories\")\r\n        .then(res => res.json())\r\n        .then(data => dispatch(getCatsHandler(data)))\r\n\r\nexport const getCatsImages: tDispatch = (id, page) => (dispatch: tActionCreator) => {\r\n    let url = \"https://api.thecatapi.com/v1/images/search?limit=20\";\r\n    if (page) {\r\n        url += `&page=${page}`;\r\n    }\r\n    if (id) {\r\n        url += `&category_ids=${id}`\r\n    }\r\n\r\n    dispatch(setLoading(true))\r\n    return fetch(url)\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            dispatch(setLoading(false))\r\n            dispatch(setErrorMessage(null))\r\n            return dispatch(changeCatsHandler({data, page}));\r\n        })\r\n        .catch((error: Error) => {\r\n            dispatch(setErrorMessage(error.message))\r\n            dispatch(setLoading(false))\r\n        })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useEffect} from 'react';\r\nimport {useDispatch} from \"react-redux\"\r\nimport {getCats} from './redux/catAction/catAction';\r\nimport Card from \"./componet/Card\";\r\nimport NavBar from \"./componet/NavBar\";\r\n\r\n\r\nfunction App() {\r\n\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(getCats())\r\n    }, [dispatch])\r\n    return (\r\n        <div className=\"App\">\r\n            <NavBar/>\r\n            <Card/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {configureStore} from '@reduxjs/toolkit'\r\nimport cats from './catRaducer/catRaducer'\r\nimport type {tState as tCats} from '../global.types'\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        cats,\r\n    },\r\n})\r\nexport type RootState = {\r\n    cats: tCats\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store from './redux/store'\r\nimport {Provider} from 'react-redux'\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <React.StrictMode>\r\n            <App/>\r\n        </React.StrictMode>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}